


group TransformObservationISH(source src: CTS_Transport, source patient:Patient, target tgt: Observation)
{
       src -> tgt.id = uuid();
       src -> tgt.meta as meta collate, meta.profile = '?';
       src -> tgt.status = 'active';

       src.operations as operations, operations.data as data then
       {
              //Fall-ID
              data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1600'" then
              {
                  values.value as fallID -> tgt.identifier = id('http://uk-koeln.de/fhir/NamingSystem/nNGM/fallnummer', fallID);
              };
              //Biopsy-ID
              data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_1601'" then
              {
                  values.value as biopsyID -> tgt.identifier = id('http://uk-koeln.de/NamingSystem/nNGM/biopsienummer', biopsyID);
              };
       
             //if .. exists then ALK ISH
             data.values as values where "blockindex = 1 and groupindex = 20 and itemid = 'id_2108".exists() then
             {
                //ALK ISH phaenotype value?, code, date??
                data.values as values as kitbezeichnung -> tgt.component = create('BackboneElement') as component,
                component.code = cc(),
                component.value = cc(),
                component.interpretation,
                component.referenceRange;

                data.values as values as hersteller -> tgt.component = create('BackboneElement') as component,
                component.code = cc(),
                component.value = cc(),
                component.interpretation,
                component.referenceRange;

                data.values as values as sop -> tgt.component = create('BackboneElement') as component,
                component.code = cc(),
                component.value = cc(),
                component.interpretation,
                component.referenceRange;

                data.values as values as standort -> tgt.component = create('BackboneElement') as component,
                component.code = cc(),
                component.value = cc(),
                component.interpretation,
                component.referenceRange;   
        }

//ALK Fusion ISH profile
ALK-Fusion-Expression.ISH.system = http://ncit.nci.nih.gov
ALK-Fusion-Expression.ISH.code  = C23022
ALK-Fusion-Expression.ISH.display = In Situ Hybridization Staining Method
ALK-Fusion-Expression.ISH.KitBezeichnung = cc('','');
ALK-Fusion-Expression.ISH.Hersteller = cc('','');
ALK-Fusion-Expression.ISH.SOPVersionsnummerAmstandord = value;
ALK-Fusion-Expression.ISH.StandortDreiBuchstabenKuerzel = coding/string?
ALK-Fusion-Expression.ISH.Ergebnis = cc();
ALK-Fusion-Expression.ISH.PositiveTumorzelle = valueratio;

//MET Amplifikation ISH profile
MET-Amplifikation-Expression.ISH.system = http://ncit.nci.nih.gov
MET-Amplifikation-Expression.ISH.code  = C23022
MET-Amplifikation-Expression.ISH.display = In Situ Hybridization Staining Method
MET-Amplifikation-Expression.ISH.KitBezeichnung = cc('','');
MET-Amplifikation-Expression.ISH.Hersteller = cc('','');
MET-Amplifikation-Expression.ISH.SOPVersionsnummerAmstandord = value;
MET-Amplifikation-Expression.ISH.StandortDreiBuchstabenKuerzel = coding/string?
MET-Amplifikation-Expression.ISH.Ergebnis = cc(); //positiv (high-level), positiv (moderate), negativ, nicht auswertbar
MET-Amplifikation-Expression.ISH.Amplifikation = cc(); //Amplifikation high-level, amplifikation moderate-level, keine amplifikation

//RET Fusion ISH Expression
RET-Fusion-Expression.ISH.system = http://ncit.nci.nih.gov
RET-Fusion-Expression.ISH.code  = C23022
RET-Fusion-Expression.ISH.display = In Situ Hybridization Staining Method
RET-Fusion-Expression.ISH.KitBezeichnung = cc('','');
RET-Fusion-Expression.ISH.Hersteller = cc('','');
RET-Fusion-Expression.ISH.SOPVersionsnummerAmstandord = value;
RET-Fusion-Expression.ISH.StandortDreiBuchstabenKuerzel = coding/string?
RET-Fusion-Expression.ISH.Ergebnis = cc();
RET-Fusion-Expression.ISH.PositiveTumorzelle = valueratio;

//ROS1 Fusion ISH profile
ROS1-Fusion-Expression.ISH.system = http://ncit.nci.nih.gov
ROS1-Fusion-Expression.ISH.code  = C23022
ROS1-Fusion-Expression.ISH.display = In Situ Hybridization Staining Method
ROS1-Fusion-Expression.ISH.KitBezeichnung = cc('','');
ROS1-Fusion-Expression.ISH.Hersteller = cc('','');
ROS1-Fusion-Expression.ISH.SOPVersionsnummerAmstandord = value;
ROS1-Fusion-Expression.ISH.StandortDreiBuchstabenKuerzel = coding/string?
ROS1-Fusion-Expression.ISH.Ergebnis = cc();
ROS1-Fusion-Expression.ISH.PositiveTumorzelle = valueratio;
ROS1-Fusion-Expression.ISH.Polysomie = valueratio;

}
