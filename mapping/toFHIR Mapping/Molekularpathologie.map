/// version = 0.1
/// title = "nNGM: Mapping MolekularPhatologie FHIR"

/*
TODO

ORGANIZATION -> CDS FIELD: SOP-Versionsnummer des Standorts -> Mapping this to coding.text is not correct. Its also a dropdown in the formular. Is there a Valueset out there
                                                                to map this? 

OBSERVATION http://uk-koeln.de/fhir/StructureDefinition/Observation/ish -> The amplification-level component has a false binding and the values are not matching the formular.

OBSERVATION http://uk-koeln.de/fhir/StructureDefinition/Observation/fish -> hersteller componenet has the false valueset binding, should be "http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho"
OBSERVATION http://uk-koeln.de/fhir/StructureDefinition/Observation/fish -> valueCodeableConcept has the false valueset binding, should be "http://uk-koeln.de/fhir/ValueSet/ergebnis"
OBSERVATION http://uk-koeln.de/fhir/StructureDefinition/Observation/fish -> The amplification-level component has a false binding and the values are not matching the formular.

SERVICEREQUEST -> EVERYTHING -> THe whole Resource seems to be false here. The mapped field are about the status of the Observation. Why is this mapped to   
                                    a ServiceRequest. Also all the fields and Valuesets are not matching or have fixed values where you can choose something in the formular.
                                    In my oppinion this should be part of the Observation because its the Status of the Observation?

*/

map "http://uk-koeln.de/fhir/StructureMap/nNGM_Mapping_MolekularphatologieFHIR" = nNGM_Mapping_MolekularphatologieFHIR

/* ------------------------------ Bundle ---------------------------- */
group TransformBundle(source src: CTS_Transport, target bundle: Bundle)
{
    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';

    src -> bundle.entry as entry then CreateEpisodeOfCare(src, entry);
    src -> bundle.entry as entry then CreateOrganization(src, entry);
    src -> bundle.entry as entry then CreateALKCISHObservation(src, entry);
    src -> bundle.entry as entry then CreateALKFISHObservation(src, entry);
    src -> bundle.entry as entry then CreateMETCISHObservation(src, entry);
    src -> bundle.entry as entry then CreateMETFISHObservation(src, entry);
    src -> bundle.entry as entry then CreateRETCISHObservation(src, entry);
    src -> bundle.entry as entry then CreateRETFISHObservation(src, entry);
    src -> bundle.entry as entry then CreateROS1CISHObservation(src, entry);
    src -> bundle.entry as entry then CreateROS1FISHObservation(src, entry);
}


/*-----------------EpisodeOfCare-----------------------*/
group CreateEpisodeOfCare(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            src -> tgt.resource = create('EpisodeOfCare') as specimen then TransformEpisodeOfCare(src, specimen);
        };
    };
}

group TransformEpisodeOfCare(source src: CTS_Transport, target tgt: EpisodeOfCare) 
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/EpisodeOfCare/nNGM';

    //fixed status
    src -> tgt.status = 'active';

    // Patient reference
    src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    //Untersuchung-ID
    src.operations as operations, operations.data as data then 
    {
         data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as value -> tgt.identifier as identifier, identifier.value = value;
        };
    };
}

/*-----------------Organization-----------------------*/
group CreateOrganization(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2435'
                                    or blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            src -> tgt.resource = create('Organization') as organization then TransformOrganization(src, organization);
        };
    };
}

group TransformOrganization(source src: CTS_Transport, target tgt: Organization) 
{
    // Metadata
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Organization/clinical-site';

    //Standort
    src.operations as operations, operations.data as data then 
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as value -> tgt.name = value;
        };
    };

    //THIS FIELD IS COMMENT OUT! LOOK AT TODO!
    //SOP-Versionsnummer des Standorts
    /*src.operations as operations, operations.data as data then 
    {
        data.values as values where "blockindex = 0 and groupindex = 0 and itemid = 'id_2617'" then
        {
            values.value as value -> tgt.coding as coding, coding.text = value;
        };
    };*/
}

/*--------------ALK CISH Observation------------------*/
group CreateALKCISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2108'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2109'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2112'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2113'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformALKCISHObservation(src, observation);
        };
    };
}

group TransformALKCISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    src then MapALKDateOfAssessment(src, tgt);
    src then MapALKPhaenotyp(src, tgt);
    src then MapCISHCategory(src, tgt);
    src then MapALKCode(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2108'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2109'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2112'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

    //Positive Tumorzellen
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2113'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };
}

/*--------------ALK FISH Observation------------------*/
group CreateALKFISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2115'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2116'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2119'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2120'
                                    or blockindex = 3 and groupindex = 0 and itemid = 'id_2121'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformALKFISHObservation(src, observation);
        };
    };
}

group TransformALKFISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    src then MapALKDateOfAssessment(src, tgt);
    src then MapALKPhaenotyp(src, tgt);
    src then MapFISHCategory(src, tgt);
    src then MapALKCode(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2115'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2116'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2119'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

    //Positive Tumorzellen
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2120'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };

    //Polysomie
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2121'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}

/*--------------MET CISH Observation------------------*/
group CreateMETCISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2143'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2144'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2147'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2148'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformMETCISHObservation(src, observation);
        };
    };
}

group TransformMETCISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    src then MapMETDateOfAssessment(src, tgt);
    src then MapMETPhaenotyp(src, tgt);
    src then MapCISHCategory(src, tgt);
    src then MapMETCode(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2143'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2144'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2147'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

    //Amplifikation
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2148'" then
        {
            values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
            {
                amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', amplifikation, amplifikation);
                amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
            };
        };
    };
}

/*--------------MET FISH Observation------------------*/
group CreateMETFISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2150'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2151'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2154'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2155'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2156'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2157'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2158'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2159'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2160'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2161'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2162'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2163'
                                    or blockindex = 4 and groupindex = 0 and itemid = 'id_2164'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformMETFISHObservation(src, observation);
        };
    };
}

group TransformMETFISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/fish'; 

    src then MapMETDateOfAssessment(src, tgt);
    src then MapMETPhaenotyp(src, tgt);
    src then MapFISHCategory(src, tgt);
    src then MapMETCode(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2150'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2151'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2154'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

     //Amplifikation
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2155'" then
        {
            values.value as amplifikation -> tgt.component = create('BackboneElement') as amplifikationcomponent then
            {
                amplifikation -> amplifikationcomponent.valueCodeableConcept = cc('http://loinc.org', amplifikation, amplifikation);
                amplifikation -> amplifikationcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'amplification-level');
            };
        };
    };

    //15 MET Signal
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2156'" then
        {
            values.value as met15signal -> tgt.component = create('BackboneElement') as met15signalcomponent then
            {
                met15signal -> met15signalcomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(met15signal, quantity);
                met15signal -> met15signalcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '15-met-ratio');
            };
        };
    };

    //5 MET Signal
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2157'" then
        {
            values.value as met5signal -> tgt.component = create('BackboneElement') as met5signalcomponent then
            {
                met5signal -> met5signalcomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(met5signal, quantity);
                met5signal -> met5signalcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '5-met-ratio');
            };
        };
    };

    //4 MET Signal
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2158'" then
        {
            values.value as met4signal -> tgt.component = create('BackboneElement') as met4signalcomponent then
            {
                met4signal -> met4signalcomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(met4signal, quantity);
                met4signal -> met4signalcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', '4-met-ratio');
            };
        };
    };
    //gezaehlte Tumorzellen
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2159'" then
        {
            values.value as tumorzellen -> tgt.component = create('BackboneElement') as gezaeltetumorzellencomponent then
            {
                tumorzellen -> gezaeltetumorzellencomponent.valueInteger = tumorzellen;
                tumorzellen -> gezaeltetumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C0007584');
            };
        };
    };

    //MET signale
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2160'" then
        {
            values.value as metsignale -> tgt.component = create('BackboneElement') as metsignalecomponent then
            {
                metsignale -> metsignalecomponent.valueInteger = metsignale;
                metsignale -> metsignalecomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-signal-count');
            };
        };
    };

    //CEN signale
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2161'" then
        {
            values.value as censignale -> tgt.component = create('BackboneElement') as censignalecomponent then
            {
                censignale -> censignalecomponent.valueInteger = censignale;
                censignale -> censignalecomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'cet-signal-count');
            };
        };
    };

    //Quotient MET/CEN signale
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2162'" then
        {
            values.value as qmetcensignale -> tgt.component = create('BackboneElement') as qmetcensignalecomponent then
            {
                qmetcensignale -> qmetcensignalecomponent.valueInteger = qmetcensignale;
                qmetcensignale -> qmetcensignalecomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-cen-signal-ratio');
            };
        };
    };

    //Durchschnitt MET-Genkopiezahl/Zelle 
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2163'" then
        {
            values.value as genkopiezahl -> tgt.component = create('BackboneElement') as genkopiezahlcomponent then
            {
                genkopiezahl -> genkopiezahlcomponent.valueInteger = genkopiezahl;
                genkopiezahl -> genkopiezahlcomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'met-copy-per-cell');
            };
        };
    };

    //Polysomie
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2164'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}

/*--------------RET CISH Observation------------------*/
group CreateRETCISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2187'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2188'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2191'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2192'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformRETCISHObservation(src, observation);
        };
    };
}

group TransformRETCISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    src then MapRETDateOfAssessment(src, tgt);
    src then MapRETPhaenotyp(src, tgt);
    src then MapCISHCategory(src, tgt);
    src then MapRETCode(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2187'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2188'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2191'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

    //Positive Tumorzellen
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2192'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };
}

/*--------------RET FISH Observation------------------*/
group CreateRETFISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2194'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2195'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2198'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2199'
                                    or blockindex = 5 and groupindex = 0 and itemid = 'id_2200'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformRETFISHObservation(src, observation);
        };
    };
}

group TransformRETFISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    src then MapRETDateOfAssessment(src, tgt);
    src then MapRETPhaenotyp(src, tgt);
    src then MapFISHCategory(src, tgt);
    src then MapRETCode(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2194'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2195'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2198'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

    //Positive Tumorzellen
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2199'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };

    //Polysomie
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2200'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}

/*--------------ROS1 CISH Observation------------------*/
group CreateROS1CISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2221'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2222'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2225'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2226'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2227'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformROS1CISHObservation(src, observation);
        };
    };
}

group TransformROS1CISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    src then MapROS1DateOfAssessment(src, tgt);
    src then MapROS1Phaenotyp(src, tgt);
    src then MapCISHCategory(src, tgt);
    src then MapROS1Code(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2221'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2222'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2225'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

    //Positive Tumorzellen
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2226'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };

    //Polysomie
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2227'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}

/*--------------ROS1 FISH Observation------------------*/
group CreateROS1FISHObservation(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2229'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2230'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2233'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2234'
                                    or blockindex = 6 and groupindex = 0 and itemid = 'id_2235'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformROS1FISHObservation(src, observation);
        };
    };
}

group TransformROS1FISHObservation(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ish'; 

    src then MapROS1DateOfAssessment(src, tgt);
    src then MapROS1Phaenotyp(src, tgt);
    src then MapFISHCategory(src, tgt);
    src then MapROS1Code(src, tgt);

    //Kit Bezeichnung
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2229'" then
        {
            values.value as kit -> tgt.component = create('BackboneElement') as kitcomponent then
            {
                kit -> kitcomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ish-fish-kits', kit);
                kit -> kitcomponent.code = cc('http://ncit.nci.nih.gov', 'C42793');
            };
        };
    };

    //Hersteller
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2230'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as herstellercomponent then
            {
                hersteller -> herstellercomponent.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> herstellercomponent.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };
    };

    //Ergebnis
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2233'" then
        {
            values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
        };
    };

    //Positive Tumorzellen
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2234'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };
    };

    //Polysomie
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2235'" then
        {
            values.value as polysomie -> tgt.component = create('BackboneElement') as polysomiecomponent then
            {
                polysomie -> polysomiecomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(polysomie, quantity);
                polysomie -> polysomiecomponent.code = cc('http://ncit.nci.nih.gov', 'C36331');
            };
        };
    };
}

/*--------------ServiceRequest------------------*/
group CreateServiceRequest(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2520'
                                    or blockindex = 7 and groupindex = 0 and itemid = 'id_2462'
                                    or blockindex = 7 and groupindex = 0 and itemid = 'id_2521'" then
        {
            src -> tgt.resource = create('ServiceRequest') as servicerequest then TransformServiceRequest(src, servicerequest);
        };
    };
}

group TransformServiceRequest(source src: CTS_Transport, target tgt: ServiceRequest)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/ServiceRequest/nNGM/testung'; 

}


/*---------------------------------------------------------------*/
/*------------------Functionality--------------------------------*/
/*---------------------------------------------------------------*/

group MapALKDateOfAssessment(source src: CTS_Transport, target tgt: Observation)
{
     //Date of Assesment
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2098'" then
        {
            values.value as dateOfAssessment -> tgt.effectiveDateTime = dateOp(dateOfAssessment, 'dateTime');
        };
    };
}

group MapMETDateOfAssessment(source src: CTS_Transport, target tgt: Observation)
{
     //Date of Assesment
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2132'" then
        {
            values.value as dateOfAssessment -> tgt.effectiveDateTime = dateOp(dateOfAssessment, 'dateTime');
        };
    };
}

group MapRETDateOfAssessment(source src: CTS_Transport, target tgt: Observation)
{
     //Date of Assesment
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2183'" then
        {
            values.value as dateOfAssessment -> tgt.effectiveDateTime = dateOp(dateOfAssessment, 'dateTime');
        };
    };
}

group MapROS1DateOfAssessment(source src: CTS_Transport, target tgt: Observation)
{
     //Date of Assesment
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2211'" then
        {
            values.value as dateOfAssessment -> tgt.effectiveDateTime = dateOp(dateOfAssessment, 'dateTime');
        };
    };
}

group MapPercentageValue(source src: string, target tgt: Quantity)
{
    src -> tgt.value = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit = 'percentage',
            tgt.code = '%';
}

//Phaenotypes
group MapALKPhaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    //Phänotype
     src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 3 and groupindex = 0 and itemid = 'id_2099'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
            {
                phaenotyp -> phaenotypcomponent.valueString = phaenotyp;
                phaenotyp -> phaenotypcomponent.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };
    };
}

group MapMETPhaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    //Phänotype
     src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'id_2133'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
            {
                phaenotyp -> phaenotypcomponent.valueString = phaenotyp;
                phaenotyp -> phaenotypcomponent.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };
    };
}

group MapRETPhaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    //Phänotype
     src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2184'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
            {
                phaenotyp -> phaenotypcomponent.valueString = phaenotyp;
                phaenotyp -> phaenotypcomponent.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };
    };
}

group MapROS1Phaenotyp(source src: CTS_Transport, target tgt: Observation)
{
    //Phänotype
     src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2212'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as phaenotypcomponent then
            {
                phaenotyp -> phaenotypcomponent.valueString = phaenotyp;
                phaenotyp -> phaenotypcomponent.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };
    };
}

//Categories
group MapCISHCategory(source src: CTS_Transport, target tgt: Observation)
{
    //CISH category
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                coding.code = 'laboratory';
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://uk-koeln.de/fhir/ValueSet/obs-methods',
                                                                coding.code = 'CISH';                                                     
    };
}

group MapFISHCategory(source src: CTS_Transport, target tgt: Observation)
{
    //FISH category
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                coding.code = 'laboratory';
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://uk-koeln.de/fhir/ValueSet/obs-methods',
                                                                coding.code = 'FISH';                                                     
    };
}

//Codes
group MapALKCode(source src: CTS_Transport, target tgt: Observation)
{
    //ALK code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'ALK');
}

group MapMETCode(source src: CTS_Transport, target tgt: Observation)
{
    //MET code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'MET');
}

group MapRETCode(source src: CTS_Transport, target tgt: Observation)
{
    //RET code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'RET');
}

group MapROS1Code(source src: CTS_Transport, target tgt: Observation)
{
    //ROS1 code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'ROS1');
}