/// version = 0.1
/// title = "ImmunohistochemieFHIR"

/*
TODO

OBSERVATION -> Add the pos-tumor-zellen component from the CISH/FISH Befund to this profil
OBSERVATION -> change the ratio-pos-flaeche to quantity-pos-flaeche and change the choicetype to Qantity
*/

map "http://uk-koeln.de/fhir/StructureMap/ImmunohistochemieFHIR" = ImmunohistochemieFHIR

uses "http://hl7.org/fhir/StructureDefinition/CTS_Transport" as source
uses "http://hl7.org/fhir/StructureDefinition/EpisodeOfCare" as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" as target
uses "http://hl7.org/fhir/StructureDefinition/ServiceRequest" as target

group TransformBundle(source src: CTS_Transport, target bundle: Bundle)
{
    src -> bundle.id = uuid();
    src -> bundle.type = 'collection';

    src -> bundle.entry as entry then CreateTransformEpisodeOfCare(src, entry);
    src -> bundle.entry as entry then CreateTransformOrganization(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationBRAF(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationCK7(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationMIB1(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationNapsinA(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationP40(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationSynaptophysin(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationTTF1(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationALK(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationMET(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationPDL1(src, entry);
    src -> bundle.entry as entry then CreateTransformObservationROS1(src, entry);

    //src -> bundle.entry as entry then CreateTransformServiceRequestIHC(src, entry);
    //src -> bundle.entry as entry then CreateTransformObservationIHC(src, entry);
    
}

/* ------------------------------ Episode Of Care ---------------------------- */
group CreateTransformEpisodeOfCare(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            src -> tgt.resource = create('EpisodeOfCare') as episodeOfCare then TransformEpisodeOfCare(src, episodeOfCare);
        };          
    };
}

group TransformEpisodeOfCare(source src: CTS_Transport, target tgt: EpisodeOfCare)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/EpisodeOfCare/nNGM';
    
    //src.patid as patid -> tgt.subject = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');

    src.operations as operations, operations.data as data then
    {
        src -> tgt.status = cast('active', 'FHIR.code');
        src.patid as patid -> tgt.patient = create('Reference') as subject, subject.reference = evaluate(patid, '\'Patient/\' + $this');
        
        /* ------------------------------ Referenzen ---------------------------- */
        // Untersuchungs-ID
        data.values as values where "blockindex = 1 and groupindex = 0 and itemid = 'assessment_id'" then
        {
            values.value as value ->    tgt.identifier as identifier,
                                        identifier.value = value;
        };
    };
}

/* ------------------------------ Organization ---------------------------- */
group CreateTransformOrganization(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'
        or blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            src -> tgt.resource = create('Organization') as organization then TransformOrganization(src, organization);
        };
    };
}

/* ------------------------------ Organization ---------------------------- */
group TransformOrganization(source src: CTS_Transport, target tgt: Organization)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Organization/clinical-site';

    src.operations as operations, operations.data as data then
    {
        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // Standort
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2435'" then
        {
            values.value as name -> tgt.name = name;
        };

        /* ------------------------------ Netzwerkzentrum ---------------------------- */
        // SOP-Versionsnummer des Standorts
        data.values as values where "blockindex = 2 and groupindex = 0 and itemid = 'id_2613'" then
        {
            values.value as text -> tgt.type as type, type.text = text;
        };
    };
}

/* ------------------------------ Observation BRAF---------------------------- */
group CreateTransformObservationBRAF(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_group'
        or blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_phaenotype'
        or blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_ab'
        or blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_kit_ab_producer'
        or blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_result'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationBRAF(src, observation);
        };
    };
}
/* ------------------------------ Observation BRAF ---------------------------- */
group TransformObservationBRAF(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

     //BRAF code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'BRAF');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {

        // Date of Assessment
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_group'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_phaenotype'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_ab'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_kit_ab_producer'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 4 and groupindex = 0 and itemid = 'braf_ihc_result'" then
        {
            values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation CK7---------------------------- */
group CreateTransformObservationCK7(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2037'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_2038'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_2041'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_2042'
        or blockindex = 5 and groupindex = 0 and itemid = 'id_2045'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationCK7(src, observation);
        };
    };
}

group TransformObservationCK7(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //CK7 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'CK7');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2037'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2038'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2041'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2042'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 5 and groupindex = 0 and itemid = 'id_2045'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation MIB1---------------------------- */
group CreateTransformObservationMIB1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2055'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_2056'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_2059'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_2060'
        or blockindex = 6 and groupindex = 0 and itemid = 'id_2063'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationMIB1(src, observation);
        };
    };
}

group TransformObservationMIB1(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //MIB1 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'MIB1');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2055'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2056'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2059'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2060'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 6 and groupindex = 0 and itemid = 'id_2063'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation Napsin A---------------------------- */
group CreateTransformObservationNapsinA(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2064'
        or blockindex = 7 and groupindex = 0 and itemid = 'id_2065'
        or blockindex = 7 and groupindex = 0 and itemid = 'id_2068'
        or blockindex = 7 and groupindex = 0 and itemid = 'id_2069'
        or blockindex = 7 and groupindex = 0 and itemid = 'id_2072'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationNAPSINA(src, observation);
        };
    };
}

group TransformObservationNAPSINA(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //MIB1 code
        src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'Napsin A');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2064'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2065'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2068'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2069'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 7 and groupindex = 0 and itemid = 'id_2072'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation P40---------------------------- */
group CreateTransformObservationP40(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2073'
        or blockindex = 8 and groupindex = 0 and itemid = 'id_2074'
        or blockindex = 8 and groupindex = 0 and itemid = 'id_2077'
        or blockindex = 8 and groupindex = 0 and itemid = 'id_2078'
        or blockindex = 8 and groupindex = 0 and itemid = 'id_2079'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationP40(src, observation);
        };
    };
}

group TransformObservationP40(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //P40 code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'P40');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2073'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2074'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2077'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2078'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 8 and groupindex = 0 and itemid = 'id_2079'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation Synaptophysin---------------------------- */
group CreateTransformObservationSynaptophysin(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2080'
        or blockindex = 9 and groupindex = 0 and itemid = 'id_2081'
        or blockindex = 9 and groupindex = 0 and itemid = 'id_2084'
        or blockindex = 9 and groupindex = 0 and itemid = 'id_2085'
        or blockindex = 9 and groupindex = 0 and itemid = 'id_2088'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationSynaptophysin(src, observation);
        };
    };
}

group TransformObservationSynaptophysin(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //SYNAPTOPHYSIN code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'SYNAPTOPHYSIN');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2080'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2081'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2084'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2085'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 9 and groupindex = 0 and itemid = 'id_2088'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation TTF1---------------------------- */
group CreateTransformObservationTTF1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2089'
        or blockindex = 10 and groupindex = 0 and itemid = 'id_2090'
        or blockindex = 10 and groupindex = 0 and itemid = 'id_2093'
        or blockindex = 10 and groupindex = 0 and itemid = 'id_2094'
        or blockindex = 10 and groupindex = 0 and itemid = 'id_2097'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationTTF1(src, observation);
        };
    };
}

group TransformObservationTTF1(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //TTF1 code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'TTF1');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2089'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2090'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2093'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2094'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 10 and groupindex = 0 and itemid = 'id_2097'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation ALK---------------------------- */
group CreateTransformObservationALK(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2098'
        or blockindex = 11 and groupindex = 0 and itemid = 'id_2534'
        or blockindex = 11 and groupindex = 0 and itemid = 'id_2102'
        or blockindex = 11 and groupindex = 0 and itemid = 'id_2103'
        or blockindex = 11 and groupindex = 0 and itemid = 'id_2106'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationALK(src, observation);
        };
    };
}

group TransformObservationALK(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //ALK code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'ALK');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2098'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2534'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2102'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2103'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 11 and groupindex = 0 and itemid = 'id_2106'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}

/* ------------------------------ Observation MET---------------------------- */
group CreateTransformObservationMET(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2132'
        or blockindex = 12 and groupindex = 0 and itemid = 'id_2535'
        or blockindex = 12 and groupindex = 0 and itemid = 'id_2136'
        or blockindex = 12 and groupindex = 0 and itemid = 'id_2451'
        or blockindex = 12 and groupindex = 0 and itemid = 'id_2139'
        or blockindex = 12 and groupindex = 0 and itemid = 'id_2140'
        or blockindex = 12 and groupindex = 0 and itemid = 'id_2141'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationMET(src, observation);
        };
    };
}

group TransformObservationMET(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //MET code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'MET');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2132'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2535'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2136'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2451'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2139'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };

        // Klassifikation
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2140'" then
        {
            values.value as klassifikation -> tgt.component = create('BackboneElement') as componentKlassifikation then
            {
                klassifikation -> componentKlassifikation.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/0-3+-klassifikation', klassifikation);
                klassifikation -> componentKlassifikation.code = cc('http://ncit.nci.nih.gov', 'C25161');
            };
        };

        //HERE IS A MISSING BINDING TO COMPONENT.CODE FOR EXPRESSION HIGH LEVEL
        // Expression High Level
        data.values as values where "blockindex = 12 and groupindex = 0 and itemid = 'id_2141'" then
        {
            values.value as expression where "value = 'yes'" then
            {
                expression -> tgt.component = create('BackboneElement') as componentExpression then
                {
                    expression -> componentExpression.valueBoolean = 'true';
                //expression -> componentExpression.code = cc('http://ncit.nci.nih.gov', '?');
                };
            };
            values.value as expression where "value = 'no'" then
            {
                expression -> tgt.component = create('BackboneElement') as componentExpression then
                {
                    expression -> componentExpression.valueBoolean = 'false';
                //expression -> componentExpression.code = cc('http://ncit.nci.nih.gov', '?');
                };
            };
        };
    };
}

/* ------------------------------ Observation PD-L1---------------------------- */
group CreateTransformObservationPDL1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2172'
        or blockindex = 13 and groupindex = 0 and itemid = 'id_2173'
        or blockindex = 13 and groupindex = 0 and itemid = 'id_2176'
        or blockindex = 13 and groupindex = 0 and itemid = 'id_2177'
        or blockindex = 13 and groupindex = 0 and itemid = 'id_2180'
        or blockindex = 13 and groupindex = 0 and itemid = 'id_2181'
        or blockindex = 13 and groupindex = 0 and itemid = 'id_2182'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationPDL1(src, observation);
        };
    };
}

group TransformObservationPDL1(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //PD-L1 code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'PD-L1');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2172'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2173'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2176'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2177'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2180'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };

        // Menge an Tumorzellen
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2181'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://ncit.nci.nih.gov', 'C70460');
            };
        };

        // Fläche positiver Immunzellen / Gesamttumorfläche
        data.values as values where "blockindex = 13 and groupindex = 0 and itemid = 'id_2182'" then
        {
            values.value as ergebnis -> tgt.component = create('BackboneElement') as postumorzellencomponent then
            {
                ergebnis -> postumorzellencomponent.valueQuantity = create('Quantity') as quantity then MapPercentageValue(ergebnis, quantity);
                ergebnis -> postumorzellencomponent.code = cc('http://uk-koeln.de/fhir/CodeSystem/tbd-codes', 'tcell-surface-ratio');
            };
        };
    };
}

/* ------------------------------ Observation ROS1---------------------------- */
group CreateTransformObservationROS1(source src: CTS_Transport, target tgt: BackboneElement)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2211'
        or blockindex = 14 and groupindex = 0 and itemid = 'id_2536'
        or blockindex = 14 and groupindex = 0 and itemid = 'id_2215'
        or blockindex = 14 and groupindex = 0 and itemid = 'id_2216'
        or blockindex = 14 and groupindex = 0 and itemid = 'id_2219'" then
        {
            src -> tgt.resource = create('Observation') as observation then TransformObservationROS1(src, observation);
        };
    };
}

group TransformObservationROS1(source src: CTS_Transport, target tgt: Observation)
{
    src -> tgt.id = uuid();
    src -> tgt.meta as meta collate, meta.profile = 'http://uk-koeln.de/fhir/StructureDefinition/Observation/ihc';

    //ROS1 code
    src -> tgt.code = cc('http://uk-koeln.de/fhir/ValueSet/obs-codes', 'ROS1');

    //IHC category
    src then MapIHCCategory(src, tgt);

    src.operations as operations, operations.data as data then
    {
        // Date of Assessment
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2211'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.start = dateOp(effectiveDT, 'date');
        };
         data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2521'" then
        {
            values.value as effectiveDT -> tgt.effectivePeriod = create('Period') as period collate, period.end = dateOp(effectiveDT, 'date');
        };

        // Phänotyp
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2536'" then
        {
            values.value as phaenotyp -> tgt.component = create('BackboneElement') as componentPhaenotyp then
            {
                phaenotyp -> componentPhaenotyp.valueString = phaenotyp;
                phaenotyp -> componentPhaenotyp.code = cc('http://ncit.nci.nih.gov', 'C16977');
            };
        };

        // Antikörper
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2215'" then
        {
            values.value as antikoerper -> tgt.component = create('BackboneElement') as componentAntikoerper then
            {
                antikoerper -> componentAntikoerper.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/ihc-antikoerper', antikoerper);
                antikoerper -> componentAntikoerper.code = cc('http://ncit.nci.nih.gov', 'C16295');
            };
        };

        // Hersteller
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2216'" then
        {
            values.value as hersteller -> tgt.component = create('BackboneElement') as componentHersteller then
            {
                hersteller -> componentHersteller.valueCodeableConcept = cc('http://uk-koeln.de/fhir/CodeSystem/hersteller-molpatho', hersteller);
                hersteller -> componentHersteller.code = cc('http://ncit.nci.nih.gov', 'C25392');
            };
        };

        // Ergebnis
        data.values as values where "blockindex = 14 and groupindex = 0 and itemid = 'id_2219'" then
        {
             values.value as component -> tgt.component = create('BackboneElement') as componentErgebnis then
            {
                values.value as ergebnis ->  tgt.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/ergebnis', ergebnis, ergebnis);
            };
        };
    };
}


/*-----------------HELPERS----------------------------*/

group MapPercentageValue(source src: string, target tgt: Quantity)
{
    src -> tgt.value = src,
            tgt.system = 'http://unitsofmeasure.org',
            tgt.unit = 'percentage',
            tgt.code = '%';
}

group MapObservationStatus(source src: CTS_Transport, target tgt: Observation)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2520'" then
        {
            values.value as value -> tgt.status;
        };
    };
}

group MapObservationAbschluss(source src: CTS_Transport, target tgt: Observation)
{
    src.operations as operations, operations.data as data then
    {
        data.values as values where "blockindex = 15 and groupindex = 0 and itemid = 'id_2462'" then
        {
            values.value as value -> tgt.status as status, status.extension as extension, extension.url = 'http://uk-koeln.de/fhir/Extension/statusAbschluss',
                                                                                            extension.valueCodeableConcept = cc('http://uk-koeln.de/fhir/ValueSet/statusAbschluss', value, value);
        };
    };
}

group MapIHCCategory(source src: CTS_Transport, target tgt: Observation)
{
    //FISH category
    src -> tgt.category as category then
    {
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                                                                coding.code = 'laboratory';
        src -> category.coding = create ('Coding') as coding, coding.system = 'http://uk-koeln.de/fhir/ValueSet/obs-methods',
                                                                coding.code = 'IHC';                                                     
    };
}
